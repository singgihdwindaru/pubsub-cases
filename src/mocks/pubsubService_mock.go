// Code generated by MockGen. DO NOT EDIT.
// Source: src/services/pubsubService.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	models "pubsub-cases/src/models"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockIPubsubService is a mock of IPubsubService interface.
type MockIPubsubService struct {
	ctrl     *gomock.Controller
	recorder *MockIPubsubServiceMockRecorder
}

// MockIPubsubServiceMockRecorder is the mock recorder for MockIPubsubService.
type MockIPubsubServiceMockRecorder struct {
	mock *MockIPubsubService
}

// NewMockIPubsubService creates a new mock instance.
func NewMockIPubsubService(ctrl *gomock.Controller) *MockIPubsubService {
	mock := &MockIPubsubService{ctrl: ctrl}
	mock.recorder = &MockIPubsubServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIPubsubService) EXPECT() *MockIPubsubServiceMockRecorder {
	return m.recorder
}

// PublishMsg mocks base method.
func (m *MockIPubsubService) PublishMsg(ctx context.Context, message string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PublishMsg", ctx, message)
	ret0, _ := ret[0].(error)
	return ret0
}

// PublishMsg indicates an expected call of PublishMsg.
func (mr *MockIPubsubServiceMockRecorder) PublishMsg(ctx, message interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublishMsg", reflect.TypeOf((*MockIPubsubService)(nil).PublishMsg), ctx, message)
}

// PullMsg mocks base method.
func (m *MockIPubsubService) PullMsg(ctx context.Context, config models.SubscriberConfig) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PullMsg", ctx, config)
	ret0, _ := ret[0].(error)
	return ret0
}

// PullMsg indicates an expected call of PullMsg.
func (mr *MockIPubsubServiceMockRecorder) PullMsg(ctx, config interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PullMsg", reflect.TypeOf((*MockIPubsubService)(nil).PullMsg), ctx, config)
}
