// Code generated by MockGen. DO NOT EDIT.
// Source: src/services/pubsubService.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockIPubsubService is a mock of IPubsubService interface.
type MockIPubsubService struct {
	ctrl     *gomock.Controller
	recorder *MockIPubsubServiceMockRecorder
}

// MockIPubsubServiceMockRecorder is the mock recorder for MockIPubsubService.
type MockIPubsubServiceMockRecorder struct {
	mock *MockIPubsubService
}

// NewMockIPubsubService creates a new mock instance.
func NewMockIPubsubService(ctrl *gomock.Controller) *MockIPubsubService {
	mock := &MockIPubsubService{ctrl: ctrl}
	mock.recorder = &MockIPubsubServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIPubsubService) EXPECT() *MockIPubsubServiceMockRecorder {
	return m.recorder
}

// PublishMsg mocks base method.
func (m *MockIPubsubService) PublishMsg() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PublishMsg")
	ret0, _ := ret[0].(error)
	return ret0
}

// PublishMsg indicates an expected call of PublishMsg.
func (mr *MockIPubsubServiceMockRecorder) PublishMsg() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublishMsg", reflect.TypeOf((*MockIPubsubService)(nil).PublishMsg))
}

// PullMsg mocks base method.
func (m *MockIPubsubService) PullMsg() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PullMsg")
	ret0, _ := ret[0].(error)
	return ret0
}

// PullMsg indicates an expected call of PullMsg.
func (mr *MockIPubsubServiceMockRecorder) PullMsg() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PullMsg", reflect.TypeOf((*MockIPubsubService)(nil).PullMsg))
}
