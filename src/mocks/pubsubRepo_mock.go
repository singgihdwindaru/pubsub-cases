// Code generated by MockGen. DO NOT EDIT.
// Source: src/repo/pubsubRepo.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockIPubSubRepo is a mock of IPubSubRepo interface.
type MockIPubSubRepo struct {
	ctrl     *gomock.Controller
	recorder *MockIPubSubRepoMockRecorder
}

// MockIPubSubRepoMockRecorder is the mock recorder for MockIPubSubRepo.
type MockIPubSubRepoMockRecorder struct {
	mock *MockIPubSubRepo
}

// NewMockIPubSubRepo creates a new mock instance.
func NewMockIPubSubRepo(ctrl *gomock.Controller) *MockIPubSubRepo {
	mock := &MockIPubSubRepo{ctrl: ctrl}
	mock.recorder = &MockIPubSubRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIPubSubRepo) EXPECT() *MockIPubSubRepoMockRecorder {
	return m.recorder
}

// PublishMessage mocks base method.
func (m *MockIPubSubRepo) PublishMessage(ctx context.Context, message interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PublishMessage", ctx, message)
	ret0, _ := ret[0].(error)
	return ret0
}

// PublishMessage indicates an expected call of PublishMessage.
func (mr *MockIPubSubRepoMockRecorder) PublishMessage(ctx, message interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublishMessage", reflect.TypeOf((*MockIPubSubRepo)(nil).PublishMessage), ctx, message)
}
